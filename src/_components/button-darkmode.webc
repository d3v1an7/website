<button
  id="theme-toggle"
  type="button"
  class="terminal:bg-lime-900 terminal:focus:ring-lime-400 inline-flex h-6 w-12 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-stone-300 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-violet-600 dark:bg-stone-800"
  role="switch"
  aria-checked="false">
  <span class="relative flex h-full w-full items-center justify-between px-1">
    <span
      id="toggle-indicator"
      class="terminal:bg-lime-700 pointer-events-none absolute left-0 hidden h-5 w-5 translate-x-0 rounded-full bg-violet-600">
    </span>
    <svg-sun
      class="terminal:text-lime-400 z-10 h-3 w-3 text-stone-50 dark:text-stone-300"></svg-sun>
    <svg-moon
      class="terminal:text-lime-400 z-10 h-3 w-3 text-stone-600 dark:text-stone-50"></svg-moon>
    <span class="sr-only">Toggle theme</span>
  </span>
</button>
<script webc:bucket="defer">
  const html = document.documentElement;
  const themeToggleBtn = document.getElementById('theme-toggle');
  const toggleIndicator = document.getElementById('toggle-indicator');
  const savedTheme = localStorage.getItem('theme');
  const setTheme = (theme) => {
    html.classList.remove('light', 'dark', 'terminal');
    html.classList.add(theme);
    if (theme === 'dark') {
      themeToggleBtn.setAttribute('aria-checked', 'true');
    } else {
      themeToggleBtn.setAttribute('aria-checked', 'false');
    }
    // Avoid flash of animation on load.
    toggleIndicator.classList.remove('hidden');
    toggleIndicator.classList.add('toggle-ready');
  };
  themeToggleBtn.addEventListener('click', () => {
    const currentTheme = localStorage.getItem('theme');
    const selectedTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(selectedTheme);
    localStorage.setItem('theme', selectedTheme);
  });
  if (savedTheme) {
    setTheme(savedTheme);
  } else {
    const prefersDarkScheme = window.matchMedia(
      '(prefers-color-scheme: dark)',
    ).matches;
    const osTheme = prefersDarkScheme ? 'dark' : 'light';
    setTheme(osTheme);
    localStorage.setItem('theme', osTheme);
  }
  // Easter egg for terminal mode (desktop).
  const keysPressed = { m: false, a: false, t: false };
  function handleKeyDown(event) {
    if (['m', 'a', 't'].includes(event.key)) {
      keysPressed[event.key] = true;
      checkCombo();
    }
  }
  function handleKeyUp(event) {
    if (['m', 'a', 't'].includes(event.key)) {
      keysPressed[event.key] = false;
    }
  }
  function checkCombo() {
    if (keysPressed['m'] && keysPressed['a'] && keysPressed['t']) {
      setTheme('terminal');
      localStorage.setItem('theme', 'terminal');
      resetKeys();
    }
  }
  function resetKeys() {
    keysPressed['m'] = false;
    keysPressed['a'] = false;
    keysPressed['t'] = false;
  }
  window.addEventListener('keydown', handleKeyDown);
  window.addEventListener('keyup', handleKeyUp);
  // Easter egg for terminal mode (mobile).
  document.addEventListener(
    'touchstart',
    function (event) {
      if (event.touches.length === 4) {
        setTheme('terminal');
        localStorage.setItem('theme', 'terminal');
      }
    },
    false,
  );
</script>
